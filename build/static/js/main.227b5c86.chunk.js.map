{"version":3,"sources":["Components/Todo.js","Components/TodoForm.js","Components/Footer.js","todoHooks.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","react_default","a","createElement","className","isCompleted","style","textDecoration","checked","type","onChange","text","onClick","TodoForm","addTodo","completeAll","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","id","name","htmlFor","target","placeholder","Footer","todos","clearCompleted","length","filter","item","exampleTodos","useTodos","initialValue","arguments","undefined","initialTodos","JSON","parse","window","localStorage","getItem","setTodos","useEffect","setItem","stringify","newTodos","toConsumableArray","concat","splice","map","App","_useTodos","Components_TodoForm","Components_Todo","key","Components_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.227b5c86.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Todo = ({ todo, index, completeTodo, removeTodo }) => (\n  <li className={todo.isCompleted ? \"completed\" : \"\"}>\n    <div className=\"view\" style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n      <input checked={todo.isCompleted || false}  type=\"checkbox\" className=\"toggle\" onChange={() => completeTodo(index)}>\n      </input>\n      <label>{todo.text}</label>\n        {todo.isCompleted ? (<button className='destroy' onClick={() => removeTodo(index)}></button>) : (null)}\n    </div>\n  </li>\n);\n\nexport default Todo;\n","import React, { useState } from \"react\";\n\nfunction TodoForm({ addTodo, completeAll }) {\n  const [value, setValue] = useState(\"\");\n\n  const submit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  }\n\n  return(\n    <form onSubmit={submit}>\n      <input onChange={completeAll} className=\"toggle-all\" id='toggle-all' type='checkbox' name='toggle'></input>\n      <label htmlFor='toggle-all'>Mark all as complete</label>\n      <input type=\"text\" className=\"new-todo\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"Task...\"\n      />\n    </form>\n  );\n}\n\nexport default TodoForm;","import React from \"react\";\n\nconst Footer = ({ todos, clearCompleted }) => {\n  if (todos.length === 0) return;\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{todos.length} items left</span>\n\n      {todos.filter(item => item.isCompleted).length > 0 ? (\n        <button className=\"clear-completed\" onClick={clearCompleted}>\n          Clear completed ({todos.filter(item => item.isCompleted).length})\n        </button>\n      ) : null}\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\n\nconst exampleTodos = [\n  { text: \"Look at this beauty\", isCompleted: true },\n  { text: \"Read the code\", isCompleted: false },\n  { text: \"Contact author\", isCompleted: false },\n  { text: \"Write feedback\", isCompleted: false },\n];\n\nconst useTodos = (initialValue = exampleTodos) => {\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"elmTodos\")) || initialValue;\n  const [todos, setTodos] = useState(initialTodos);\n  // 💁‍ this effect will be called every time DOM tree updated, means that we'll always have fresh state in localstorage\n  useEffect(() => {\n    window.localStorage.setItem(\"elmTodos\", JSON.stringify(todos));\n  });\n  return {\n    todos,\n    addTodo: text => {\n      const newTodos = [...todos, { text, isCompleted: false }];\n      setTodos(newTodos);\n    },\n    completeTodo: index => {\n      const newTodos = [...todos];\n      newTodos[index].isCompleted = !newTodos[index].isCompleted;\n      setTodos(newTodos);\n    },\n    removeTodo: index => {\n      const newTodos = [...todos];\n      newTodos.splice(index, 1);\n      setTodos(newTodos);\n    },\n    clearCompleted: () => {\n      const newTodos = todos.filter(item => item.isCompleted === false);\n      setTodos(newTodos);\n    },\n    completeAll: () => {\n      const newTodos = todos.map(item => {\n        item.isCompleted = !item.isCompleted;\n        return item;\n      });\n      setTodos(newTodos);\n    },\n  };\n};\n\nexport default useTodos;\n","import React from 'react';\nimport './App.css';\nimport './index.css';\n\nimport Todo from \"./Components/Todo.js\";\nimport TodoForm from \"./Components/TodoForm\";\nimport Footer from \"./Components/Footer.js\";\nimport useTodos from \"./todoHooks.js\";\n\nconst App = () => {\n  const { todos, addTodo, completeTodo, removeTodo, clearCompleted, completeAll } = useTodos();\n  // const [todos, setTodos] = useState([\n  //   { text: \"Learn react\", isCompleted: false },\n  //   { text: \"Learn hooks\", isCompleted: false },\n  //   { text: \"Learn redux\", isCompleted: false },\n  // ]);\n\n  // const addTodo = text => {\n  //   const newTodos = [...todos, { text }];\n  //   setTodos(newTodos);\n  // }\n  // const completeTodo = index => {\n  //   const newTodos = [...todos];\n  //   newTodos[index].isCompleted = !newTodos[index].isCompleted;\n  //   setTodos(newTodos);\n  // }\n  // const removeTodo = index => {\n  //   const newTodos = [...todos];\n  //   newTodos.splice(index, 1);\n  //   setTodos(newTodos)\n  // }\n  // const clearCompleted = () => {\n  //   const newTodos = todos.filter(item => item.isCompleted === false);\n  //   setTodos(newTodos);\n  // }\n  // const completeAll = () => {\n  //   const newTodos = todos.map(item => { item.isCompleted = !item.isCompleted; return item });\n  //   setTodos(newTodos);\n  // }\n\n  return(\n    <div className=\"todoapp\">\n      <div className=\"\">\n        <TodoForm addTodo={addTodo} completeAll={completeAll} />\n        <ul className='todo-list'>\n          {todos.map((todo, index) => (\n            <Todo \n              key={index}\n              index={index}\n              todo={todo}\n              completeTodo={completeTodo}\n              removeTodo={removeTodo}\n            />\n          ))}\n        </ul>\n        <Footer todos={todos} clearCompleted={clearCompleted} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}